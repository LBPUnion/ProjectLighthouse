using System.Collections.Generic;
using System.Linq;
using LBPUnion.ProjectLighthouse.Types.Activity;
using LBPUnion.ProjectLighthouse.Types.Entities.Activity;
using LBPUnion.ProjectLighthouse.Types.Entities.Profile;

namespace LBPUnion.ProjectLighthouse.Extensions;

public static class ActivityQueryExtensions
{
    public static List<int> GetIds(this IReadOnlyCollection<OuterActivityGroup> groups, ActivityGroupType type)
    {
        List<int> ids = new();
        // Add outer group ids
        ids.AddRange(groups.Where(g => g.Key.GroupType == type)
            .Where(g => g.Key.TargetId != 0)
            .Select(g => g.Key.TargetId)
            .ToList());

        // Add specific event ids
        ids.AddRange(groups.SelectMany(g =>
            g.Groups.SelectMany(gr => gr.Where(a => a.GroupType == type).Select(a => a.TargetId))));
        if (type == ActivityGroupType.User)
        {
            ids.AddRange(groups.Where(g => g.Key.GroupType is not ActivityGroupType.News)
                .SelectMany(g => g.Groups.Select(a => a.Key.UserId)));
        }

        return ids.Distinct().ToList();
    }

    public static IQueryable<IGrouping<ActivityGroup, ActivityDto>> ToActivityGroups
        (this IQueryable<ActivityDto> activityQuery, bool groupByActor = false) =>
        groupByActor
            ? activityQuery.GroupBy(dto => new ActivityGroup
            {
                Timestamp = dto.Activity.Timestamp.Date,
                UserId = dto.Activity.UserId,
                TargetNewsId = dto.TargetNewsId ?? 0,
                TargetTeamPickSlotId = dto.TargetTeamPickId ?? 0,
            })
            : activityQuery.GroupBy(dto => new ActivityGroup
            {
                Timestamp = dto.Activity.Timestamp.Date,
                TargetUserId = dto.TargetUserId ?? 0,
                TargetSlotId = dto.TargetSlotId ?? 0,
                TargetPlaylistId = dto.TargetPlaylistId ?? 0,
                TargetNewsId = dto.TargetNewsId ?? 0,
            });

    public static List<OuterActivityGroup> ToOuterActivityGroups
        (this IEnumerable<IGrouping<ActivityGroup, ActivityDto>> activityGroups, bool groupByActor = false) =>
        // Pin news posts to the top
        activityGroups.OrderByDescending(g => g.Key.GroupType == ActivityGroupType.News ? 1 : 0)
            .ThenByDescending(g => g.MaxBy(a => a.Activity.Timestamp)?.Activity.Timestamp ?? g.Key.Timestamp)
            .Select(g => new OuterActivityGroup
            {
                Key = g.Key,
                Groups = g.OrderByDescending(a => a.Activity.Timestamp)
                    .GroupBy(gr => new InnerActivityGroup
                    {
                        Type = groupByActor ? gr.GroupType : gr.GroupType != ActivityGroupType.News ? ActivityGroupType.User : ActivityGroupType.News,
                        UserId = gr.Activity.UserId,
                        TargetId = groupByActor ? gr.TargetId : gr.GroupType != ActivityGroupType.News ? gr.Activity.UserId : gr.TargetNewsId ?? 0,
                    })
                    .ToList(),
            })
            .ToList();

    // WARNING - To the next person who tries to improve this code: As of writing this, it's not possible
    // to build a pattern matching switch statement with expression trees. so the only other option
    // is to basically rewrite this nested ternary mess with expression trees which isn't much better
    // The resulting SQL generated by EntityFramework uses a CASE statement which is probably fine
    // TOTAL HOURS WASTED: 3
    public static IQueryable<ActivityDto> ToActivityDto
        (this IQueryable<ActivityEntity> activityQuery, bool includeSlotCreator = false, bool includeTeamPick = false)
    {
        return activityQuery.Select(a => new ActivityDto
        {
            Activity = a,
            TargetSlotId = a is LevelActivityEntity
                ? ((LevelActivityEntity)a).SlotId
                : a is PhotoActivityEntity && ((PhotoActivityEntity)a).Photo.SlotId != 0
                    ? ((PhotoActivityEntity)a).Photo.SlotId
                    : a is CommentActivityEntity && ((CommentActivityEntity)a).Comment.Type == CommentType.Level
                        ? ((CommentActivityEntity)a).Comment.TargetSlotId
                        : a is ScoreActivityEntity
                            ? ((ScoreActivityEntity)a).Score.SlotId
                            : a is ReviewActivityEntity
                                ? ((ReviewActivityEntity)a).Review.SlotId
                                : 0,
            TargetSlotGameVersion = a is LevelActivityEntity
                ? ((LevelActivityEntity)a).Slot.GameVersion
                : a is PhotoActivityEntity && ((PhotoActivityEntity)a).Photo.SlotId != 0
                    ? ((PhotoActivityEntity)a).Photo.Slot.GameVersion
                    : a is CommentActivityEntity && ((CommentActivityEntity)a).Comment.Type == CommentType.Level
                        ? ((CommentActivityEntity)a).Comment.TargetSlot.GameVersion
                        : a is ScoreActivityEntity
                            ? ((ScoreActivityEntity)a).Score.Slot.GameVersion
                            : a is ReviewActivityEntity
                                ? ((ReviewActivityEntity)a).Review.Slot.GameVersion
                                : 0,
            TargetSlotCreatorId = includeSlotCreator
                ? a is LevelActivityEntity
                    ? ((LevelActivityEntity)a).Slot.CreatorId
                    : a is PhotoActivityEntity && ((PhotoActivityEntity)a).Photo.SlotId != 0
                        ? ((PhotoActivityEntity)a).Photo.Slot!.CreatorId
                        : a is CommentActivityEntity && ((CommentActivityEntity)a).Comment.Type == CommentType.Level
                            ? ((CommentActivityEntity)a).Comment.TargetSlot.CreatorId
                            : a is ScoreActivityEntity
                                ? ((ScoreActivityEntity)a).Score.Slot.CreatorId
                                : a is ReviewActivityEntity
                                    ? ((ReviewActivityEntity)a).Review.Slot!.CreatorId
                                    : 0
                : 0,

            TargetUserId = a is UserActivityEntity
                ? ((UserActivityEntity)a).TargetUserId
                : a is CommentActivityEntity && ((CommentActivityEntity)a).Comment.Type == CommentType.Profile
                    ? ((CommentActivityEntity)a).Comment.TargetUserId
                    : a is PhotoActivityEntity && ((PhotoActivityEntity)a).Photo.SlotId == 0
                        ? ((PhotoActivityEntity)a).Photo.CreatorId
                        : 0,
            TargetPlaylistId = a is PlaylistActivityEntity || a is PlaylistWithSlotActivityEntity
                ? ((PlaylistActivityEntity)a).PlaylistId
                : 0,
            TargetNewsId = a is NewsActivityEntity ? ((NewsActivityEntity)a).NewsId : 0,
            TargetTeamPickId = includeTeamPick
                ? a.Type == EventType.MMPickLevel && a is LevelActivityEntity ? ((LevelActivityEntity)a).SlotId : 0
                : 0, });
    }
}