// <auto-generated />
using System;
using LBPUnion.ProjectLighthouse.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ProjectLighthouse.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("LBPUnion.ProjectLighthouse.Types.Entities.Interaction.HeartedLevel", b =>
                {
                    b.Property<int>("HeartedLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("SlotId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("HeartedLevelId");

                    b.HasIndex("SlotId");

                    b.HasIndex("UserId");

                    b.ToTable("HeartedLevels");
                });

            modelBuilder.Entity("LBPUnion.ProjectLighthouse.Types.Entities.Interaction.HeartedPlaylist", b =>
                {
                    b.Property<int>("HeartedPlaylistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("PlaylistId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("HeartedPlaylistId");

                    b.HasIndex("PlaylistId");

                    b.HasIndex("UserId");

                    b.ToTable("HeartedPlaylists");
                });

            modelBuilder.Entity("LBPUnion.ProjectLighthouse.Types.Entities.Interaction.HeartedProfile", b =>
                {
                    b.Property<int>("HeartedProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("HeartedUserId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("HeartedProfileId");

                    b.HasIndex("HeartedUserId");

                    b.HasIndex("UserId");

                    b.ToTable("HeartedProfiles");
                });

            modelBuilder.Entity("LBPUnion.ProjectLighthouse.Types.Entities.Interaction.QueuedLevel", b =>
                {
                    b.Property<int>("QueuedLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("SlotId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("QueuedLevelId");

                    b.HasIndex("SlotId");

                    b.HasIndex("UserId");

                    b.ToTable("QueuedLevels");
                });

            modelBuilder.Entity("LBPUnion.ProjectLighthouse.Types.Entities.Interaction.RatedLevel", b =>
                {
                    b.Property<int>("RatedLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<double>("RatingLBP1")
                        .HasColumnType("double");

                    b.Property<int>("SlotId")
                        .HasColumnType("int");

                    b.Property<string>("TagLBP1")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RatedLevelId");

                    b.HasIndex("SlotId");

                    b.HasIndex("UserId");

                    b.ToTable("RatedLevels");
                });

            modelBuilder.Entity("LBPUnion.ProjectLighthouse.Types.Entities.Interaction.RatedReview", b =>
                {
                    b.Property<int>("RatedReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ReviewId")
                        .HasColumnType("int");

                    b.Property<int>("Thumb")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RatedReviewId");

                    b.HasIndex("ReviewId");

                    b.HasIndex("UserId");

                    b.ToTable("RatedReviews");
                });

            modelBuilder.Entity("LBPUnion.ProjectLighthouse.Types.Entities.Interaction.Reaction", b =>
                {
                    b.Property<int>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("TargetId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RatingId");

                    b.ToTable("Reactions");
                });

            modelBuilder.Entity("LBPUnion.ProjectLighthouse.Types.Entities.Interaction.VisitedLevel", b =>
                {
                    b.Property<int>("VisitedLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("PlaysLBP1")
                        .HasColumnType("int");

                    b.Property<int>("PlaysLBP2")
                        .HasColumnType("int");

                    b.Property<int>("PlaysLBP3")
                        .HasColumnType("int");

                    b.Property<int>("SlotId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("VisitedLevelId");

                    b.HasIndex("SlotId");

                    b.HasIndex("UserId");

                    b.ToTable("VisitedLevels");
                });

            modelBuilder.Entity("LBPUnion.ProjectLighthouse.Types.Entities.Level.DatabaseCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Endpoint")
                        .HasColumnType("longtext");

                    b.Property<string>("IconHash")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("SlotIdsCollection")
                        .HasColumnType("longtext");

                    b.HasKey("CategoryId");

                    b.ToTable("CustomCategories");
                });

            modelBuilder.Entity("LBPUnion.ProjectLighthouse.Types.Entities.Level.Playlist", b =>
                {
                    b.Property<int>("PlaylistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SlotCollection")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("PlaylistId");

                    b.HasIndex("CreatorId");

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("LBPUnion.ProjectLighthouse.Types.Entities.Level.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<string>("LabelCollection")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ReviewerId")
                        .HasColumnType("int");

                    b.Property<int>("SlotId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Thumb")
                        .HasColumnType("int");

                    b.Property<int>("ThumbsDown")
                        .HasColumnType("int");

                    b.Property<int>("ThumbsUp")
                        .HasColumnType("int");

                    b.Property<long>("Timestamp")
                        .HasColumnType("bigint");

                    b.HasKey("ReviewId");

                    b.HasIndex("ReviewerId");

                    b.HasIndex("SlotId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("LBPUnion.ProjectLighthouse.Types.Entities.Level.Score", b =>
                {
                    b.Property<int>("ScoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ChildSlotId")
                        .HasColumnType("int");

                    b.Property<string>("PlayerIdCollection")
                        .HasColumnType("longtext");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("SlotId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("ScoreId");

                    b.HasIndex("SlotId");

                    b.ToTable("Scores");
                });

            modelBuilder.Entity("LBPUnion.ProjectLighthouse.Types.Entities.Level.Slot", b =>
                {
                    b.Property<int>("SlotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AuthorLabels")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("BackgroundHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("CommentsEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<bool>("CrossControllerRequired")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("FirstUploaded")
                        .HasColumnType("bigint");

                    b.Property<int>("GameVersion")
                        .HasColumnType("int");

                    b.Property<bool>("Hidden")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("HiddenReason")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("IconHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("InitiallyLocked")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("InternalSlotId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAdventurePlanet")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("LastUpdated")
                        .HasColumnType("bigint");

                    b.Property<bool>("Lbp1Only")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LevelType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<ulong>("LocationPacked")
                        .HasColumnType("bigint unsigned");

                    b.Property<int>("MaximumPlayers")
                        .HasColumnType("int");

                    b.Property<int>("MinimumPlayers")
                        .HasColumnType("int");

                    b.Property<bool>("MoveRequired")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PlaysLBP1")
                        .HasColumnType("int");

                    b.Property<int>("PlaysLBP1Complete")
                        .HasColumnType("int");

                    b.Property<int>("PlaysLBP1Unique")
                        .HasColumnType("int");

                    b.Property<int>("PlaysLBP2")
                        .HasColumnType("int");

                    b.Property<int>("PlaysLBP2Complete")
                        .HasColumnType("int");

                    b.Property<int>("PlaysLBP2Unique")
                        .HasColumnType("int");

                    b.Property<int>("PlaysLBP3")
                        .HasColumnType("int");

                    b.Property<int>("PlaysLBP3Complete")
                        .HasColumnType("int");

                    b.Property<int>("PlaysLBP3Unique")
                        .HasColumnType("int");

                    b.Property<string>("ResourceCollection")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RootLevel")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Shareable")
                        .HasColumnType("int");

                    b.Property<bool>("SubLevel")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("TeamPick")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("SlotId");

                    b.HasIndex("CreatorId");

                    b.ToTable("Slots");
                });

            modelBuilder.Entity("LBPUnion.ProjectLighthouse.Types.Entities.Maintenance.CompletedMigration", b =>
                {
                    b.Property<string>("MigrationName")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("RanAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("MigrationName");

                    b.ToTable("CompletedMigrations");
                });

            modelBuilder.Entity("LBPUnion.ProjectLighthouse.Types.Entities.Moderation.GriefReport", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Bounds")
                        .HasColumnType("longtext");

                    b.Property<string>("GriefStateHash")
                        .HasColumnType("longtext");

                    b.Property<string>("InitialStateHash")
                        .HasColumnType("longtext");

                    b.Property<string>("JpegHash")
                        .HasColumnType("longtext");

                    b.Property<int>("LevelId")
                        .HasColumnType("int");

                    b.Property<string>("LevelOwner")
                        .HasColumnType("longtext");

                    b.Property<string>("LevelType")
                        .HasColumnType("longtext");

                    b.Property<string>("Players")
                        .HasColumnType("longtext");

                    b.Property<int>("ReportingPlayerId")
                        .HasColumnType("int");

                    b.Property<long>("Timestamp")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("ReportId");

                    b.HasIndex("ReportingPlayerId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("LBPUnion.ProjectLighthouse.Types.Entities.Moderation.ModerationCase", b =>
                {
                    b.Property<int>("CaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AffectedId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<string>("CreatorUsername")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DismissedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DismisserId")
                        .HasColumnType("int");

                    b.Property<string>("DismisserUsername")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModeratorNotes")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Processed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("CaseId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DismisserId");

                    b.ToTable("Cases");
                });

            modelBuilder.Entity("LBPUnion.ProjectLighthouse.Types.Entities.Profile.BlockedProfile", b =>
                {
                    b.Property<int>("BlockedProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BlockedUserId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("BlockedProfileId");

                    b.HasIndex("BlockedUserId");

                    b.HasIndex("UserId");

                    b.ToTable("BlockedProfiles");
                });

            modelBuilder.Entity("LBPUnion.ProjectLighthouse.Types.Entities.Profile.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("DeletedType")
                        .HasColumnType("longtext");

                    b.Property<string>("Message")
                        .HasColumnType("longtext");

                    b.Property<int>("PosterUserId")
                        .HasColumnType("int");

                    b.Property<int>("TargetId")
                        .HasColumnType("int");

                    b.Property<int>("ThumbsDown")
                        .HasColumnType("int");

                    b.Property<int>("ThumbsUp")
                        .HasColumnType("int");

                    b.Property<long>("Timestamp")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("CommentId");

                    b.HasIndex("PosterUserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("LBPUnion.ProjectLighthouse.Types.Entities.Profile.LastContact", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("GameVersion")
                        .HasColumnType("int");

                    b.Property<int>("Platform")
                        .HasColumnType("int");

                    b.Property<long>("Timestamp")
                        .HasColumnType("bigint");

                    b.HasKey("UserId");

                    b.ToTable("LastContacts");
                });

            modelBuilder.Entity("LBPUnion.ProjectLighthouse.Types.Entities.Profile.Photo", b =>
                {
                    b.Property<int>("PhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<string>("LargeHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MediumHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PlanHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("SlotId")
                        .HasColumnType("int");

                    b.Property<string>("SmallHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("Timestamp")
                        .HasColumnType("bigint");

                    b.HasKey("PhotoId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("SlotId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("LBPUnion.ProjectLighthouse.Types.Entities.Profile.PhotoSubject", b =>
                {
                    b.Property<int>("PhotoSubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Bounds")
                        .HasColumnType("longtext");

                    b.Property<int>("PhotoId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PhotoSubjectId");

                    b.HasIndex("PhotoId");

                    b.HasIndex("UserId");

                    b.ToTable("PhotoSubjects");
                });

            modelBuilder.Entity("LBPUnion.ProjectLighthouse.Types.Entities.Profile.PlatformLinkAttempt", b =>
                {
                    b.Property<int>("PlatformLinkAttemptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("IPAddress")
                        .HasColumnType("longtext");

                    b.Property<int>("Platform")
                        .HasColumnType("int");

                    b.Property<ulong>("PlatformId")
                        .HasColumnType("bigint unsigned");

                    b.Property<long>("Timestamp")
                        .HasColumnType("bigint");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PlatformLinkAttemptId");

                    b.HasIndex("UserId");

                    b.ToTable("PlatformLinkAttempts");
                });

            modelBuilder.Entity("LBPUnion.ProjectLighthouse.Types.Entities.Profile.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AdminGrantedSlots")
                        .HasColumnType("int");

                    b.Property<string>("BannedReason")
                        .HasColumnType("longtext");

                    b.Property<string>("Biography")
                        .HasColumnType("longtext");

                    b.Property<string>("BooHash")
                        .HasColumnType("longtext");

                    b.Property<bool>("CommentsEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("longtext");

                    b.Property<bool>("EmailAddressVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Game")
                        .HasColumnType("int");

                    b.Property<string>("IconHash")
                        .HasColumnType("longtext");

                    b.Property<string>("Language")
                        .HasColumnType("longtext");

                    b.Property<long>("LastLogin")
                        .HasColumnType("bigint");

                    b.Property<long>("LastLogout")
                        .HasColumnType("bigint");

                    b.Property<int>("LevelVisibility")
                        .HasColumnType("int");

                    b.Property<ulong>("LinkedPsnId")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("LinkedRpcnId")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("LocationPacked")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("MehHash")
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .HasColumnType("longtext");

                    b.Property<bool>("PasswordResetRequired")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("PermissionLevel")
                        .HasColumnType("int");

                    b.Property<string>("Pins")
                        .HasColumnType("longtext");

                    b.Property<string>("PlanetHashLBP2")
                        .HasColumnType("longtext");

                    b.Property<string>("PlanetHashLBP2CC")
                        .HasColumnType("longtext");

                    b.Property<string>("PlanetHashLBP3")
                        .HasColumnType("longtext");

                    b.Property<string>("PlanetHashLBPVita")
                        .HasColumnType("longtext");

                    b.Property<int>("ProfileVisibility")
                        .HasColumnType("int");

                    b.Property<string>("TimeZone")
                        .HasColumnType("longtext");

                    b.Property<string>("TwoFactorBackup")
                        .HasColumnType("longtext");

                    b.Property<string>("TwoFactorSecret")
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("YayHash")
                        .HasColumnType("longtext");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("LBPUnion.ProjectLighthouse.Types.Entities.Token.ApiKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Key")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("APIKeys");
                });

            modelBuilder.Entity("LBPUnion.ProjectLighthouse.Types.Entities.Token.EmailSetToken", b =>
                {
                    b.Property<int>("EmailSetTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("EmailToken")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("EmailSetTokenId");

                    b.HasIndex("UserId");

                    b.ToTable("EmailSetTokens");
                });

            modelBuilder.Entity("LBPUnion.ProjectLighthouse.Types.Entities.Token.EmailVerificationToken", b =>
                {
                    b.Property<int>("EmailVerificationTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("EmailToken")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("EmailVerificationTokenId");

                    b.HasIndex("UserId");

                    b.ToTable("EmailVerificationTokens");
                });

            modelBuilder.Entity("LBPUnion.ProjectLighthouse.Types.Entities.Token.GameToken", b =>
                {
                    b.Property<int>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("GameVersion")
                        .HasColumnType("int");

                    b.Property<int>("Platform")
                        .HasColumnType("int");

                    b.Property<string>("TicketHash")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserLocation")
                        .HasColumnType("longtext");

                    b.Property<string>("UserToken")
                        .HasColumnType("longtext");

                    b.HasKey("TokenId");

                    b.HasIndex("UserId");

                    b.ToTable("GameTokens");
                });

            modelBuilder.Entity("LBPUnion.ProjectLighthouse.Types.Entities.Token.PasswordResetToken", b =>
                {
                    b.Property<int>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ResetToken")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TokenId");

                    b.ToTable("PasswordResetTokens");
                });

            modelBuilder.Entity("LBPUnion.ProjectLighthouse.Types.Entities.Token.RegistrationToken", b =>
                {
                    b.Property<int>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Token")
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .HasColumnType("longtext");

                    b.HasKey("TokenId");

                    b.ToTable("RegistrationTokens");
                });

            modelBuilder.Entity("LBPUnion.ProjectLighthouse.Types.Entities.Token.WebToken", b =>
                {
                    b.Property<int>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserToken")
                        .HasColumnType("longtext");

                    b.Property<bool>("Verified")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("TokenId");

                    b.ToTable("WebTokens");
                });

            modelBuilder.Entity("LBPUnion.ProjectLighthouse.Types.Entities.Interaction.HeartedLevel", b =>
                {
                    b.HasOne("LBPUnion.ProjectLighthouse.Types.Entities.Level.Slot", "Slot")
                        .WithMany()
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBPUnion.ProjectLighthouse.Types.Entities.Profile.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Slot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LBPUnion.ProjectLighthouse.Types.Entities.Interaction.HeartedPlaylist", b =>
                {
                    b.HasOne("LBPUnion.ProjectLighthouse.Types.Entities.Level.Playlist", "Playlist")
                        .WithMany()
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBPUnion.ProjectLighthouse.Types.Entities.Profile.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Playlist");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LBPUnion.ProjectLighthouse.Types.Entities.Interaction.HeartedProfile", b =>
                {
                    b.HasOne("LBPUnion.ProjectLighthouse.Types.Entities.Profile.User", "HeartedUser")
                        .WithMany()
                        .HasForeignKey("HeartedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBPUnion.ProjectLighthouse.Types.Entities.Profile.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HeartedUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LBPUnion.ProjectLighthouse.Types.Entities.Interaction.QueuedLevel", b =>
                {
                    b.HasOne("LBPUnion.ProjectLighthouse.Types.Entities.Level.Slot", "Slot")
                        .WithMany()
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBPUnion.ProjectLighthouse.Types.Entities.Profile.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Slot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LBPUnion.ProjectLighthouse.Types.Entities.Interaction.RatedLevel", b =>
                {
                    b.HasOne("LBPUnion.ProjectLighthouse.Types.Entities.Level.Slot", "Slot")
                        .WithMany()
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBPUnion.ProjectLighthouse.Types.Entities.Profile.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Slot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LBPUnion.ProjectLighthouse.Types.Entities.Interaction.RatedReview", b =>
                {
                    b.HasOne("LBPUnion.ProjectLighthouse.Types.Entities.Level.Review", "Review")
                        .WithMany()
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBPUnion.ProjectLighthouse.Types.Entities.Profile.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Review");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LBPUnion.ProjectLighthouse.Types.Entities.Interaction.VisitedLevel", b =>
                {
                    b.HasOne("LBPUnion.ProjectLighthouse.Types.Entities.Level.Slot", "Slot")
                        .WithMany()
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBPUnion.ProjectLighthouse.Types.Entities.Profile.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Slot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LBPUnion.ProjectLighthouse.Types.Entities.Level.Playlist", b =>
                {
                    b.HasOne("LBPUnion.ProjectLighthouse.Types.Entities.Profile.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("LBPUnion.ProjectLighthouse.Types.Entities.Level.Review", b =>
                {
                    b.HasOne("LBPUnion.ProjectLighthouse.Types.Entities.Profile.User", "Reviewer")
                        .WithMany()
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBPUnion.ProjectLighthouse.Types.Entities.Level.Slot", "Slot")
                        .WithMany()
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reviewer");

                    b.Navigation("Slot");
                });

            modelBuilder.Entity("LBPUnion.ProjectLighthouse.Types.Entities.Level.Score", b =>
                {
                    b.HasOne("LBPUnion.ProjectLighthouse.Types.Entities.Level.Slot", "Slot")
                        .WithMany()
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Slot");
                });

            modelBuilder.Entity("LBPUnion.ProjectLighthouse.Types.Entities.Level.Slot", b =>
                {
                    b.HasOne("LBPUnion.ProjectLighthouse.Types.Entities.Profile.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("LBPUnion.ProjectLighthouse.Types.Entities.Moderation.GriefReport", b =>
                {
                    b.HasOne("LBPUnion.ProjectLighthouse.Types.Entities.Profile.User", "ReportingPlayer")
                        .WithMany()
                        .HasForeignKey("ReportingPlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReportingPlayer");
                });

            modelBuilder.Entity("LBPUnion.ProjectLighthouse.Types.Entities.Moderation.ModerationCase", b =>
                {
                    b.HasOne("LBPUnion.ProjectLighthouse.Types.Entities.Profile.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBPUnion.ProjectLighthouse.Types.Entities.Profile.User", "Dismisser")
                        .WithMany()
                        .HasForeignKey("DismisserId");

                    b.Navigation("Creator");

                    b.Navigation("Dismisser");
                });

            modelBuilder.Entity("LBPUnion.ProjectLighthouse.Types.Entities.Profile.BlockedProfile", b =>
                {
                    b.HasOne("LBPUnion.ProjectLighthouse.Types.Entities.Profile.User", "BlockedUser")
                        .WithMany()
                        .HasForeignKey("BlockedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBPUnion.ProjectLighthouse.Types.Entities.Profile.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BlockedUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LBPUnion.ProjectLighthouse.Types.Entities.Profile.Comment", b =>
                {
                    b.HasOne("LBPUnion.ProjectLighthouse.Types.Entities.Profile.User", "Poster")
                        .WithMany()
                        .HasForeignKey("PosterUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Poster");
                });

            modelBuilder.Entity("LBPUnion.ProjectLighthouse.Types.Entities.Profile.LastContact", b =>
                {
                    b.HasOne("LBPUnion.ProjectLighthouse.Types.Entities.Profile.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LBPUnion.ProjectLighthouse.Types.Entities.Profile.Photo", b =>
                {
                    b.HasOne("LBPUnion.ProjectLighthouse.Types.Entities.Profile.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBPUnion.ProjectLighthouse.Types.Entities.Level.Slot", "Slot")
                        .WithMany()
                        .HasForeignKey("SlotId");

                    b.Navigation("Creator");

                    b.Navigation("Slot");
                });

            modelBuilder.Entity("LBPUnion.ProjectLighthouse.Types.Entities.Profile.PhotoSubject", b =>
                {
                    b.HasOne("LBPUnion.ProjectLighthouse.Types.Entities.Profile.Photo", "Photo")
                        .WithMany("PhotoSubjects")
                        .HasForeignKey("PhotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LBPUnion.ProjectLighthouse.Types.Entities.Profile.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Photo");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LBPUnion.ProjectLighthouse.Types.Entities.Profile.PlatformLinkAttempt", b =>
                {
                    b.HasOne("LBPUnion.ProjectLighthouse.Types.Entities.Profile.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LBPUnion.ProjectLighthouse.Types.Entities.Token.EmailSetToken", b =>
                {
                    b.HasOne("LBPUnion.ProjectLighthouse.Types.Entities.Profile.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LBPUnion.ProjectLighthouse.Types.Entities.Token.EmailVerificationToken", b =>
                {
                    b.HasOne("LBPUnion.ProjectLighthouse.Types.Entities.Profile.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LBPUnion.ProjectLighthouse.Types.Entities.Token.GameToken", b =>
                {
                    b.HasOne("LBPUnion.ProjectLighthouse.Types.Entities.Profile.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LBPUnion.ProjectLighthouse.Types.Entities.Profile.Photo", b =>
                {
                    b.Navigation("PhotoSubjects");
                });
#pragma warning restore 612, 618
        }
    }
}
