@using System.Web
@using LBPUnion.ProjectLighthouse.Configuration
@using LBPUnion.ProjectLighthouse.Database
@using LBPUnion.ProjectLighthouse.Localization
@using LBPUnion.ProjectLighthouse.Servers.Website.Extensions
@using LBPUnion.ProjectLighthouse.Types.Entities.Profile
@using LBPUnion.ProjectLighthouse.Types.Users
@using Microsoft.EntityFrameworkCore
@model LBPUnion.ProjectLighthouse.Types.Entities.Level.SlotEntity
@inject DatabaseContext Database

@{
    UserEntity? user = (UserEntity?)ViewData["User"];

    string slotName = HttpUtility.HtmlDecode(string.IsNullOrEmpty(Model!.Name) ? "Unnamed Level" : Model.Name);

    bool isMobile = (bool?)ViewData["IsMobile"] ?? false;
    bool mini = (bool?)ViewData["IsMini"] ?? false;
    string language = (string?)ViewData["Language"] ?? LocalizationManager.DefaultLang;
    string timeZone = (string?)ViewData["TimeZone"] ?? TimeZoneInfo.Local.Id;
    TimeZoneInfo timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById(timeZone);

    bool isQueued = false;
    bool isHearted = false;

    if (user != null)
    {
        isQueued = await Database.QueuedLevels.AnyAsync(h => h.SlotId == Model.SlotId && h.UserId == user.UserId);
        isHearted = await Database.HeartedLevels.AnyAsync(h => h.SlotId == Model.SlotId && h.UserId == user.UserId);
    }

    string callbackUrl = (string)ViewData["CallbackUrl"]!;
    bool showLink = (bool?)ViewData["ShowLink"] ?? false;

    string iconHash = Model.IconHash;
    if (string.IsNullOrWhiteSpace(iconHash) || iconHash.StartsWith('g')) iconHash = ServerConfiguration.Instance.WebsiteConfiguration.MissingIconHash;
}
<div class="card">
    @{
        int size = isMobile || mini ? 50 : 100;
        bool isAdventure = Model.IsAdventurePlanet;
        string adventureStyle = isAdventure ? "-webkit-mask-image: url(/assets/advSlotCardMask.png); -webkit-mask-size: contain; border-radius: 0%;" : "";
    }
    <div>
        <img src=@(isAdventure ? "/assets/advSlotCardOverlay.png" : "/assets/slotCardOverlay.png") style="min-width: @(size)px; width: @(size)px; height: @(size)px; pointer-events: none; position: absolute; z-index: 3;">
        <img src="~/assets/slotCardBackground.png" style="min-width: @(size)px; width: @(size)px; height: @(size)px; position: absolute; z-index: 1; @(adventureStyle)">
        <img class="cardIcon slotCardIcon" src="/gameAssets/@iconHash" style="min-width: @(size)px; width: @(size)px; height: @(size)px; position: relative; z-index: 2; @(adventureStyle)"  
             onerror="this.onerror='';this.src='/gameAssets/@ServerConfiguration.Instance.WebsiteConfiguration.MissingIconHash'">
    </div>
    <div class="cardStats">
        @if (!mini)
        {
            @if (showLink)
            {
                <h2>
                    <a href="~/slot/@Model.SlotId">@slotName</a> <i class="@Model.GetLevelLockIcon()"></i>
                </h2>
            }
            else
            {
                <h1>
                    @slotName <i class="@Model.GetLevelLockIcon()"></i>
                </h1>
            }
        }
        else
        {
            @if (showLink)
            {
                <h3>
                    <a href="~/slot/@Model.SlotId">@slotName</a> <i class="@Model.GetLevelLockIcon()"></i>
                </h3>
            }
            else
            {
                <h3>
                    @slotName <i class="@Model.GetLevelLockIcon()"></i>
                </h3>
            }
        }

        <div class="cardStatsUnderTitle">
            @{
                var slotStats = await Database.Slots.Where(s => s.SlotId == Model.SlotId).Select(_ => new
                {
                    HeartCount = Database.HeartedLevels.Count(h => h.SlotId == Model.SlotId),
                    ThumbsUp = Database.RatedLevels.Count(r => r.SlotId == Model.SlotId && r.Rating == 1),
                    ThumbsDown = Database.RatedLevels.Count(r => r.SlotId == Model.SlotId && r.Rating == -1),
                    RatingLbp1 = Database.RatedLevels.Where(r => r.SlotId == Model.SlotId).Average(r => (double?)r.RatingLBP1) ?? 3.0,
                }).OrderBy(_ => 1).FirstAsync();
            }
            <i class="pink heart icon" title="Hearts"></i> <span>@slotStats.HeartCount</span>
            <i class="blue play icon" title="Plays"></i> <span>@Model.PlaysUnique</span>
            <i class="green thumbs up icon" title="Yays"></i> <span>@slotStats.ThumbsUp</span>
            <i class="red thumbs down icon" title="Boos"></i> <span>@slotStats.ThumbsDown</span>

            @if (Model.GameVersion == GameVersion.LittleBigPlanet1)
            {
                <i class="yellow star icon" title="Star Rating"></i>
                <span>@(Math.Round(slotStats.RatingLbp1 * 10) / 10)</span>
            }
        </div>
        @if (Model.Creator != null)
        {
            string date = "";
            if (!mini)
                date = " on " + TimeZoneInfo.ConvertTime(DateTimeOffset.FromUnixTimeMilliseconds(Model.FirstUploaded), timeZoneInfo).DateTime.ToShortDateString();
            <p>
                <i>Created by @await Model.Creator.ToLink(Html, ViewData, language) in @Model.GameVersion.ToPrettyString()@date</i>
            </p>
        }
    </div>
    <div class="cardButtons">
            <br>
            @if (user != null && !mini && (user.IsModerator || Model.CreatorId == user.UserId))
            {
                <a class="ui blue tiny button" href="/slot/@Model.SlotId/settings" title="Settings">
                    <i class="cog icon" style="margin: 0"></i>
                </a>
            }
            
            @if (user != null && !mini && (user.UserId != Model.CreatorId))
            {
                <a class="ui red tiny button" href="/moderation/slot/@Model.SlotId/flag" title="Flag As Duplicate"
                    onclick='return confirm("Are you sure you want to flag this level as a duplicate? False reports may result in punishment.")'>
                    <i class="flag icon" style="margin: 0"></i>
                </a>
            }
        </div>
    <div class="cardButtons" style="margin-left: 0">
        <br>
        @if (user != null && !mini)
        {
            if (isHearted)
            {
                <a class="ui pink tiny button" href="/slot/@Model.SlotId/unheart?callbackUrl=@callbackUrl" title="Unheart">
                    <i class="broken heart icon" style="margin: 0"></i>
                </a>
            }
            else
            {
                <a class="ui pink tiny button" href="/slot/@Model.SlotId/heart?callbackUrl=@callbackUrl" title="Heart">
                    <i class="heart icon" style="margin: 0"></i>
                </a>
            }

            if (isQueued)
            {
                <a class="ui yellow tiny button" href="/slot/@Model.SlotId/unqueue?callbackUrl=@callbackUrl" title="Unqueue">
                    <i class="bell slash icon" style="margin: 0"></i>
                </a>
            }
            else
            {
                <a class="ui yellow tiny button" href="/slot/@Model.SlotId/queue?callbackUrl=@callbackUrl" title="Queue">
                    <i class="bell icon" style="margin: 0"></i>
                </a>
            }
        }
    </div>
</div>
