@using System.Web
@using LBPUnion.ProjectLighthouse.Localization
@using LBPUnion.ProjectLighthouse.Servers.Website.Extensions
@using LBPUnion.ProjectLighthouse.Types.Entities.Profile
@using LBPUnion.ProjectLighthouse.Types.Levels
@model LBPUnion.ProjectLighthouse.Types.Entities.Profile.Photo

@{
    string language = (string?)ViewData["Language"] ?? LocalizationManager.DefaultLang;
    string timeZone = (string?)ViewData["TimeZone"] ?? TimeZoneInfo.Local.Id;
    bool canDelete = (bool?)ViewData["CanDelete"] ?? false;
    TimeZoneInfo timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById(timeZone);
}

<div style="position: relative">
    @if (canDelete)
    {
        <button class="ui red icon button" style="position: absolute; right: 0.5em; top: 0.5em" onclick="deletePhoto(@Model.PhotoId)">
            <i class="trash icon"></i>
        </button>
        <script>
          function deletePhoto(photoId){
              if (window.confirm("Are you sure you want to delete this?\nThis action cannot be undone.")){
                  window.location.hash = "photos";
                  window.location.href = "/moderation/deletePhoto/" + photoId + "?callbackUrl=" + this.window.location;
              }          
          }
        </script>
    }
    <canvas class="hide-subjects" id="canvas-subjects-@Model.PhotoId" width="1920" height="1080"
            style="position: absolute; transform: rotate(180deg)">
    </canvas>
    <img id="game-image-@Model.PhotoId" src="/gameAssets/@Model.LargeHash"
         style="width: 100%; height: auto; border-radius: .28571429rem;" alt="Photo">
</div>
<br>

<p>
    <i>
        Taken
        @if (Model.Creator != null)
        {
            <span>by</span>
            <b>
                @await Model.Creator.ToLink(Html, ViewData, language, timeZone)
            </b>
        }
        @if (Model.Slot != null)
        {
            switch (Model.Slot.Type)
            {
                case SlotType.User:
                    <span>
                        @(Model.Slot.IsAdventurePlanet ? "on an adventure in" : "in level")
                        <b><a href="/slot/@Model.SlotId">@HttpUtility.HtmlDecode(Model.Slot.Name)</a></b>
                    </span>
                    break;
                case SlotType.Developer:
                    <span>in a story mode level</span>
                    break;
                case SlotType.Pod:
                    <span>in the pod</span>
                    break;
                case SlotType.Local:
                    <span>in a level on the moon</span>
                    break;
                case SlotType.Moon:
                case SlotType.Unknown:
                case SlotType.Unknown2:
                case SlotType.DLC:
                default:
                    throw new ArgumentOutOfRangeException();
            }
        }
        at @TimeZoneInfo.ConvertTime(DateTime.UnixEpoch.AddSeconds(Model.Timestamp), timeZoneInfo).ToString("M/d/yyyy h:mm:ss tt")
    </i>
</p>

@if (Model.PhotoSubjects.Count > 0)
{
    <p>
        <b>Photo contains @Model.PhotoSubjects.Count @(Model.PhotoSubjects.Count == 1 ? "person" : "people"):</b>
    </p>
}
<div id="hover-subjects-@Model.PhotoId">
    @foreach (PhotoSubject subject in Model.PhotoSubjects)
    {
        @await subject.User.ToLink(Html, ViewData, language, timeZone)
    }
</div>

@{
    PhotoSubject[] subjects = Model.PhotoSubjects.ToArray();
    foreach (PhotoSubject subject in subjects) subject.Username = subject.User.Username;
}

<script>
    // render the page first so that image heights have been calculated
    window.addEventListener("load", function () {
        const canvas = document.getElementById("canvas-subjects-@Model.PhotoId");
        const hoverer = document.getElementById("hover-subjects-@Model.PhotoId");
        const image = document.getElementById("game-image-@Model.PhotoId");

        hoverer.addEventListener('mouseenter', function () {
            canvas.className = "photo-subjects";
        });
        hoverer.addEventListener('mouseleave', function () {
            canvas.className = "photo-subjects hide-subjects";
        });
        
        const context = canvas.getContext('2d');

        const subjects = @Html.Raw(Json.Serialize(subjects.ToArray()));

        canvas.width = image.offsetWidth;
        canvas.height = image.clientHeight; // space for names to hang off

        const w = canvas.width;
        const h = canvas.height;

        // halfwidth, halfheight
        const hw = w / 2;
        const hh = h / 2;

        const colours = ["#96dd3c", "#ceb424", "#cc0a1d", "#c800cc"];

        subjects.forEach((s, si) => {
            const colour = colours[si % 4];

            // Bounding box
            const bounds = s.bounds.split(",").map(parseFloat);

            const [x1, y1, x2, y2] = bounds.map(n => Math.min(Math.max(n, -1), 1));

            const bx = hw - (x2 * hw);
            const by = hh - (y2 * hh);
            const bw = (x2 - x1) * hw;
            const bh = (y2 - y1) * hh;

            context.beginPath();
            context.lineWidth = 3;
            context.strokeStyle = colour;
            context.rect(bx, by, bw, bh);
            context.stroke();

            // Move into relative coordinates from bounding box
            context.translate(bx, by);

            // Username label
            context.font = "16px Lato";
            context.fillStyle = colour;

            // Text width/height for the label background
            const tw = context.measureText(s.username).width;
            const th = 24;

            // Check if the label will flow off the bottom of the frame
            const overflowBottom = (bounds[3] * hh) > (hh - 24);
            // Check if the label will flow off the left of the frame
            const overflowLeft = (bounds[2] * hw - tw) < (-hw);

            // Set alignment
            context.textAlign = overflowLeft ? "start" : "end";

            // Text x / y
            const lx = overflowLeft ? -bw + 6 : -6;
            const ly = overflowBottom ? -bh - 6 : 16;

            // Label background x / y
            const lbx = overflowLeft ? bw - tw - 12 : -2;
            const lby = overflowBottom ? bh : -24;

            // Draw background
            context.fillRect(lbx, lby, tw + 16, th);

            // Draw text, rotated back upright (canvas draws rotated 180deg)
            context.fillStyle = "white";
            context.rotate(Math.PI);
            context.fillText(s.username, lx, ly);

            // reset transform
            context.setTransform(1, 0, 0, 1, 0, 0);
        })
    }, false);
</script>
