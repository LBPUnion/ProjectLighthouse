@using System.Web
@using LBPUnion.ProjectLighthouse.Configuration
@using LBPUnion.ProjectLighthouse.Files
@using LBPUnion.ProjectLighthouse.Helpers
@using LBPUnion.ProjectLighthouse.Types.Entities.Level
@using LBPUnion.ProjectLighthouse.Types.Serialization
@model List<ReviewEntity>

@{
    bool isMobile = (bool?)ViewData["IsMobile"] ?? false;
    bool canDelete = (bool?)ViewData["CanDelete"] ?? false;
}

@for (int i = 0; i < Model.Count; i++)
{
    ReviewEntity review = Model[i];
    string faceHash = review.Thumb switch {
        -1 => review.Reviewer?.BooHash,
        0 => review.Reviewer?.MehHash,
        1 => review.Reviewer?.YayHash,
                    
        _ => throw new ArgumentOutOfRangeException(),
        } ?? "";

    if (string.IsNullOrWhiteSpace(faceHash) || !FileHelper.ResourceExists(faceHash))
    {
        faceHash = ServerConfiguration.Instance.WebsiteConfiguration.MissingIconHash;
    }

    string faceAlt = review.Thumb switch {
        -1 => "Boo!",
        0 => "Meh.",
        1 => "Yay!",
                    
        _ => throw new ArgumentOutOfRangeException(),
        };

    int size = isMobile ? 50 : 100;

    <div class="card">
        <div>
            <img class="cardIcon slotCardIcon" src="@ServerConfiguration.Instance.ExternalUrl/gameAssets/@faceHash" alt="@faceAlt" title="@faceAlt" style="min-width: @(size)px; width: @(size)px; height: @(size)px">
        </div>
        <div class="cardStats">
            <a href="/user/@review.Reviewer?.UserId">
                <h3 style="margin-bottom: 5px;">@review.Reviewer?.Username</h3>
            </a>
            @if (review.Deleted)
            {
                if (review.DeletedBy == DeletedBy.LevelAuthor)
                {
                    <p>
                        <i>This review has been deleted by the level author.</i>
                    </p>
                }
                else
                {
                    <p>
                        <i>This review has been deleted by a moderator.</i>
                    </p>
                }
            }
            else
            {
                @if (review.Labels.Length > 1)
                {
                    <div style="padding-bottom: 5px;">
                        @foreach (string reviewLabel in review.Labels)
                        {
                            <div class="ui blue label">@LabelHelper.TranslateTag(reviewLabel)</div>
                        }
                    </div>
                }
                @if (string.IsNullOrWhiteSpace(review.Text))
                {
                    <p>
                        <i>This review contains no text.</i>
                    </p>
                }
                else
                {
                    {
                        <p>@HttpUtility.HtmlDecode(review.Text)</p>
                    }
                }
            }
        </div>
        @if (canDelete && !review.Deleted)
        {
            <div style="display: inline-block; right: 1em; position: absolute;">
                <button class="ui red icon button" onclick="deleteReview(@review.ReviewId)">
                    <i class="trash icon"></i>
                </button>
                <script>
                            function deleteReview(reviewId){
                                if (window.confirm("Are you sure you want to delete this?\nThis action cannot be undone.")){
                                    window.location.hash = "reviews";
                                    window.location.href = "/moderation/deleteReview/" + reviewId + "?callbackUrl=" + this.window.location;
                                }          
                            }
                        </script>
            </div>
        }
    </div>
    @if (i != Model.Count - 1)
    {
        <div class="ui divider"></div>
    }
}
@if (isMobile)
{
    <br/>
}