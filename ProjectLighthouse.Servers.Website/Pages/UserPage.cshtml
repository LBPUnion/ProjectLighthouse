@page "/user/{userId:int}"
@using System.Web
@using LBPUnion.ProjectLighthouse.Extensions
@using LBPUnion.ProjectLighthouse.Localization.StringLists
@using LBPUnion.ProjectLighthouse.Types.Moderation.Cases
@model LBPUnion.ProjectLighthouse.Servers.Website.Pages.UserPage

@{
    Layout = "Layouts/BaseLayout";
    Model.ShowTitleInPage = false;

    Model.Title = Model.Translate(ProfileStrings.Title, Model.ProfileUser!.Username);
    Model.Description = Model.ProfileUser!.Biography;

    bool isMobile = Request.IsMobile();
}

@if (Model.ProfileUser.IsBanned)
{
    <div class="ui inverted red segment">
        <h3 style="margin-bottom:5px;"><i class="ban icon"></i> This user is currently banned.</h3>
        @if (Model.User != null && Model.User.IsModerator)
        {
            <b>Reason:</b>
            <span>"@Model.ProfileUser.BannedReason"</span>
            <br/>
            <p>
                <i>Only you and other moderators may view the ban reason.</i>
            </p>
        }
        else
        {
            <p>This user has been banned for violating the Terms of Service. Remember to follow the rules!</p>
        }
    </div>
}

<div class="@(isMobile ? "" : "ui grid")">
    <div class="eight wide column">
        @await Html.PartialAsync("Partials/UserCardPartial", Model.ProfileUser, new ViewDataDictionary(ViewData)
               {
                   {
                       "ShowLink", false
                   },
                   {
                       "IsMobile", Model.Request.IsMobile()
                   },
                   {
                       "Language", Model.GetLanguage()
                   },
                   {
                       "TimeZone", Model.GetTimeZone()
                   },
               })
    </div>
    <div class="eight wide right aligned column">
        <br>
        @if (Model.ProfileUser != Model.User && Model.User != null)
        {
            if (!Model.IsProfileUserBlocked)
            {
                <a class="ui red button" href="/user/@Model.ProfileUser.UserId/block">
                    <i class="user alternate slash icon"></i>
                    <span>Block</span>
                </a>
            }
            else
            {
                <a class="ui black button" href="/user/@Model.ProfileUser.UserId/unblock">
                    <i class="user alternate icon"></i>
                    <span>Unblock</span>
                </a>
            }
            if (!Model.IsProfileUserHearted)
            {
                <a class="ui pink button" href="/user/@Model.ProfileUser.UserId/heart">
                    <i class="heart icon"></i>
                    <span>Heart</span>
                </a>
            }
            else
            {
                <a class="ui pink button" href="/user/@Model.ProfileUser.UserId/unheart">
                    <i class="heart broken icon"></i>
                    <span>Unheart</span>
                </a>
            }
        }
        @if (Model.ProfileUser == Model.User || (Model.User?.IsModerator ?? false))
        {
            <a class="ui blue button" href="/user/@Model.ProfileUser.UserId/settings">
                <i class="cog icon"></i>
                <span>Settings</span>
            </a>
        }
        @if (Model.ProfileUser == Model.User)
        {
            <a href="/logout" class="ui red button">
                <i class="user slash icon"></i>
                @Model.Translate(BaseLayoutStrings.HeaderLogout)
            </a>
        }
    </div>
    @if (isMobile)
    {
        <br/>
    }
    <div class="eight wide column">
        <div class="ui blue segment">
            <h2>@Model.Translate(ProfileStrings.Biography)</h2>
            @if (string.IsNullOrWhiteSpace(Model.ProfileUser.Biography))
            {
                <p>@Model.Translate(ProfileStrings.NoBiography, Model.ProfileUser.Username)</p>
            }
            else
            {
                <p style="overflow-wrap: anywhere;">@HttpUtility.HtmlDecode(Model.ProfileUser.Biography)</p>
            }
        </div>
    </div>
    @if (isMobile)
    {
        <br/>
    }
    <div class="eight wide column">
        <div class="ui red segment">
            <h2>@Model.Translate(GeneralStrings.RecentActivity)</h2>
            <p>@Model.Translate(GeneralStrings.Soon)</p>
        </div>
    </div>
    @if (isMobile)
    {
        <br/>
    }
</div>

<div class="ui grid">
    @{
        string outerDiv = isMobile ? "horizontal-scroll" : "three wide column";
        string innerDiv = isMobile ? "ui top attached tabular menu horizontal-scroll" : "ui vertical fluid tabular menu";
    }
    <div class="@outerDiv">
        <div class="@innerDiv">
            <a class="item active lh-sidebar" target="lh-comments">
                Comments
            </a>
            <a class="item lh-sidebar" target="lh-photos">
                @Model.Translate(BaseLayoutStrings.HeaderPhotos)
            </a>
            <a class="item lh-sidebar" target="lh-levels">
                @Model.Translate(BaseLayoutStrings.HeaderSlots)
            </a>
            <a class="item lh-sidebar" target="lh-playlists">
                Playlists
            </a>
            @if (Model.User == Model.ProfileUser)
            {
                <a class="item lh-sidebar" target="lh-hearted">
                    Hearted Levels
                </a>
                <a class="item lh-sidebar" target="lh-queued">
                    Queued Levels
                </a>
            }
        </div>
    </div>
    @{
        string divLength = isMobile ? "sixteen" : "thirteen";
    }
    <div class="@divLength wide stretched column">
        <div class="lh-content" id="lh-comments">
            @await Html.PartialAsync("Partials/FramePartial", ($"/comments/user/{Model.ProfileUser.UserId}", "Comments"))
        </div>
        <div class="lh-content" id="lh-photos" style="display: none">
            @await Html.PartialAsync("Partials/FramePartial", ($"/photos/user/{Model.ProfileUser.UserId}", "Photos"))
        </div>
        <div class="lh-content" id="lh-levels" style="display: none">      
            @await Html.PartialAsync("Partials/FramePartial", ($"/slots/by/{Model.ProfileUser.UserId}", "Slots"))
        </div>
        <div class="lh-content" id="lh-playlists" style="display: none">
            <div class="ui purple segment">
                <p>@Model.Translate(GeneralStrings.Soon)</p>
            </div>
        </div>
        @if (Model.User == Model.ProfileUser)
        {
            <div class="lh-content" id="lh-hearted" style="display: none">
                @await Html.PartialAsync("Partials/FramePartial", ($"/slots/hearted/{Model.ProfileUser.UserId}", "Hearted Slots"))
            </div>
            <div class="lh-content" id="lh-queued" style="display: none">
                @await Html.PartialAsync("Partials/FramePartial", ($"/slots/queued/{Model.ProfileUser.UserId}", "Queued Slots"))
            </div>
        }
    </div>
</div>

@if (Model.User != null && Model.User.IsModerator)
{
    <div class="ui green segment">
        <h2>Moderation Options</h2>

        @if (!Model.ProfileUser.IsBanned)
        {
            <div>
                <a class="ui red button" href="/moderation/newCase?type=@((int)CaseType.UserBan)&affectedId=@Model.ProfileUser.UserId">
                    <i class="ban icon"></i>
                    <span>Ban User</span>
                </a>
            </div>
            <div class="ui fitted hidden divider"></div>
        }

        @if (Model.ProfileUser.CommentsEnabled)
        {
            <div>
                <a class="ui yellow button" href="/moderation/newCase?type=@((int)CaseType.UserDisableComments)&affectedId=@Model.ProfileUser.UserId">
                    <i class="lock icon"></i>
                    <span>Disable Comments</span>
                </a>
            </div>
            <div class="ui fitted hidden divider"></div>
        }

        <div>
            <a class="ui red button" href="/moderation/user/@Model.ProfileUser.UserId/wipePlanets">
                <i class="trash alternate icon"></i>
                <span>Wipe user's earth decorations</span>
            </a>
        </div>
        <div class="ui fitted hidden divider"></div>

        @if (Model.User.IsAdmin)
        {
            @await Html.PartialAsync("Partials/AdminSetGrantedSlotsFormPartial", Model.ProfileUser)
        }
    </div>
    @if (isMobile)
    {
        <br/>
    }
}

@await Html.PartialAsync("Partials/SectionScriptPartial")